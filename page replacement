FIFO:
#include <stdio.h>

int main() {
    int a[50], frame[10], n, no, k, avail, fault = 0;

    printf("Enter the number of pages: ");
    scanf("%d", &n);

    printf("Enter the page numbers:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &no);

    for (int i = 0; i < no; i++) {
        frame[i] = -1;
    }

    int j = 0;
    printf("\nPage Frames:\n");
    for (int i = 0; i < n; i++) {
        printf("Page %d: ", a[i]);
        int flag = 0;
        for (k = 0; k < no; k++) {
            if (frame[k] == a[i]) {
                flag = 1;
                break;
            }
        }
        if (flag == 0) {
            frame[j] = a[i];
            j = (j + 1) % no;
            fault++;
            for (k = 0; k < no; k++) {
                printf("%d ", frame[k]);
            }
        } else {
            for (k = 0; k < no; k++) {
                printf("%d ", frame[k]);
            }
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", fault);

    return 0;
}
output:
Enter the number of pages: 5
Enter the page numbers:
3
2
5
1
3
Enter the number of frames: 4
Page Frames:
Page 3: 3 -1 -1 -1 
Page 2: 3 2 -1 -1 
Page 5: 3 2 5 -1 
Page 1: 3 2 5 1 
Page 3: 3 2 5 1 
Total Page Faults: 4


LRU:

#include <stdio.h>
#include <limits.h>

int findLRU(int time[], int n, int occupied) {
    int minimum = INT_MAX, pos = -1;
    for (int i = 0; i < occupied; i++) {
        if (time[i] < minimum) {
            minimum = time[i];
            pos = i;
        }
    }
    return pos;
}

void printFrame(int queue[], int occupied) {
    for (int i = 0; i < occupied; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n");
}

int main() {
    int incomingStream[] = {1, 2, 3, 2, 155, 2, 1, 62, 5, 6, 3, 2, 5, 6, 3, 1, 3, 6, 1, 24};
    int n = sizeof(incomingStream) / sizeof(incomingStream[0]);
    
    int m;
    printf("Enter the number of frames: ");
    scanf("%d", &m);

    int frames[m];
    int time[m];
    int occupied = 0;

    for (int i = 0; i < m; i++) {
        frames[i] = -1;
        time[i] = 0;
    }

    printf("Incoming Stream:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", incomingStream[i]);
    }
    printf("\n");

    printf("Page Frames:\n");
    for (int i = 0; i < n; i++) {
        int page = incomingStream[i];
        printf("Page %d: ", page);
        
        int found = -1;
        for (int j = 0; j < occupied; j++) {
            if (frames[j] == page) {
                time[j] = i;
                found = j;
                break;
            }
        }
        
        if (found == -1) {
            if (occupied < m) {
                frames[occupied] = page;
                time[occupied] = i;
                occupied++;
            } else {
                int lruPos = findLRU(time, m, occupied);
                frames[lruPos] = page;
                time[lruPos] = i;
            }
            
            printFrame(frames, occupied);
        } else {
            printFrame(frames, occupied);
        }
    }

    return 0;
}
output:
Enter the number of frames: 20
Incoming Stream:
1 2 3 2 155 2 1 62 5 6 3 2 5 6 3 1 3 6 1 24 
Page Frames:
Page 1: 1 
Page 2: 1 2 
Page 3: 1 2 3 
Page 2: 1 2 3 
Page 155: 1 2 3 155 
Page 2: 1 2 3 155 
Page 1: 1 2 3 155 
Page 62: 1 2 3 155 62 
Page 5: 1 2 3 155 62 5 
Page 6: 1 2 3 155 62 5 6 
Page 3: 1 2 3 155 62 5 6 
Page 2: 1 2 3 155 62 5 6 
Page 5: 1 2 3 155 62 5 6 
Page 6: 1 2 3 155 62 5 6 
Page 3: 1 2 3 155 62 5 6 
Page 1: 1 2 3 155 62 5 6 
Page 3: 1 2 3 155 62 5 6 
Page 6: 1 2 3 155 62 5 6 
Page 1: 1 2 3 155 62 5 6 
Page 24: 1 2 3 155 62 5 6 24 



