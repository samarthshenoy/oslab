#include <stdio.h>
#include <stdlib.h>

int main() {
    int RQ[100], n, initial, size, move;
    int TotalHeadMoment = 0;
    
    printf("Enter the number of Requests\n");
    scanf("%d", &n);
    
    printf("Enter the Requests sequence\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &RQ[i]);
    
    printf("Enter initial head position\n");
    scanf("%d", &initial);
    
    printf("Enter total disk size\n");
    scanf("%d", &size);
    
    printf("Enter the head movement direction (high=1, low=0)\n");
    scanf("%d", &move);

    // Sorting the requests using Bubble Sort
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (RQ[j] > RQ[j + 1]) {
                int temp = RQ[j];
                RQ[j] = RQ[j + 1];
                RQ[j + 1] = temp;
            }
        }
    }

    int index = 0;
    for (int i = 0; i < n; i++) {
        if (initial < RQ[i]) {
            index = i;
            break;
        }
    }
    
    printf("Sequence of request access:\n");
    if (move == 1) {
        for (int i = index; i < n; i++) {
            printf("%d ", RQ[i]);
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMoment += abs(size - RQ[n - 1] - 1);
        TotalHeadMoment += size - 1;
        initial = 0;
        for (int i = 0; i < index; i++) {
            printf("%d ", RQ[i]);
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    }
    
    printf("\nTotal Head Movement: %d\n", TotalHeadMoment);
    
    return 0;
}

CScan:
#include <stdio.h>
#include <stdlib.h>

int main() {
    int RQ[100], n, initial, size, move;
    int TotalHeadMoment = 0;
    
    printf("Enter the number of Requests\n");
    scanf("%d", &n);
    
    printf("Enter the Requests sequence\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &RQ[i]);
    
    printf("Enter initial head position\n");
    scanf("%d", &initial);
    
    printf("Enter total disk size\n");
    scanf("%d", &size);
    
    printf("Enter the head movement direction (high=1, low=0)\n");
    scanf("%d", &move);

    // Sorting the requests using Bubble Sort
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (RQ[j] > RQ[j + 1]) {
                int temp = RQ[j];
                RQ[j] = RQ[j + 1];
                RQ[j + 1] = temp;
            }
        }
    }

    int index = 0;
    for (int i = 0; i < n; i++) {
        if (initial < RQ[i]) {
            index = i;
            break;
        }
    }
    
    printf("Sequence of request access:\n");
    if (move == 1) {
        for (int i = index; i < n; i++) {
            printf("%d ", RQ[i]);
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        
        // Move to the end of the disk
        TotalHeadMoment += abs(size - RQ[n - 1] - 1);
        TotalHeadMoment += size - 1;

        // Move back to the initial position
        TotalHeadMoment += abs(initial - 0);
        initial = 0;

        for (int i = 0; i < index; i++) {
            printf("%d ", RQ[i]);
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    }
    
    printf("\nTotal Head Movement: %d\n", TotalHeadMoment);
    
    return 0;
}

look:
#include <stdio.h>
#include <stdlib.h>

int main() {
    int RQ[100], n, initial, size, move;
    int TotalHeadMoment = 0;
    
    printf("Enter the number of Requests\n");
    scanf("%d", &n);
    
    printf("Enter the Requests sequence\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &RQ[i]);
    
    printf("Enter initial head position\n");
    scanf("%d", &initial);
    
    printf("Enter total disk size\n");
    scanf("%d", &size);
    
    printf("Enter the head movement direction (high=1, low=0)\n");
    scanf("%d", &move);

    // Sorting the requests using Bubble Sort
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (RQ[j] > RQ[j + 1]) {
                int temp = RQ[j];
                RQ[j] = RQ[j + 1];
                RQ[j + 1] = temp;
            }
        }
    }

    int index = 0;
    for (int i = 0; i < n; i++) {
        if (initial < RQ[i]) {
            index = i;
            break;
        }
    }
    
    printf("Sequence of request access:\n");
    if (move == 1) {
        for (int i = index; i < n; i++) {
            printf("%d ", RQ[i]);
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }

        // Move back to the initial position
        TotalHeadMoment += abs(initial - RQ[n - 1]);
        initial = RQ[n - 1];

        for (int i = n - 2; i >= 0; i--) {
            printf("%d ", RQ[i]);
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    }
    
    printf("\nTotal Head Movement: %d\n", TotalHeadMoment);
    
    return 0;
}

clock:
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int track;
    int referenceBit;
} Request;

int main() {
    Request RQ[100];
    int n, initial, size, move;
    int TotalHeadMovement = 0;
    
    printf("Enter the number of Requests\n");
    scanf("%d", &n);
    
    printf("Enter the Requests sequence\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &RQ[i].track);
        RQ[i].referenceBit = 0;
    }
    
    printf("Enter initial head position\n");
    scanf("%d", &initial);
    
    printf("Enter total disk size\n");
    scanf("%d", &size);
    
    printf("Enter the head movement direction (high=1, low=0)\n");
    scanf("%d", &move);

    // Sorting the requests using Bubble Sort
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (RQ[j].track > RQ[j + 1].track) {
                Request temp = RQ[j];
                RQ[j] = RQ[j + 1];
                RQ[j + 1] = temp;
            }
        }
    }

    int currentIndex = 0;
    for (int i = 0; i < n; i++) {
        if (initial < RQ[i].track) {
            currentIndex = i;
            break;
        }
    }
    
    printf("Sequence of request access:\n");
    if (move == 1) {
        for (int i = currentIndex; i < n; i++) {
            printf("%d ", RQ[i].track);
            TotalHeadMovement += abs(RQ[i].track - initial);
            initial = RQ[i].track;
        }

        // Move back to the initial position
        TotalHeadMovement += abs(initial - RQ[n - 1].track);
        initial = RQ[n - 1].track;

        for (int i = n - 2; i >= 0; i--) {
            printf("%d ", RQ[i].track);
            TotalHeadMovement += abs(RQ[i].track - initial);
            initial = RQ[i].track;
        }
    }
    
    printf("\nTotal Head Movement: %d\n", TotalHeadMovement);
    
    return 0;
}
